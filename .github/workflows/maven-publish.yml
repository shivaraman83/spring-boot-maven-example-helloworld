# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#apache-maven-with-a-settings-path

name: sampleapi-mvn-api-build

on: push

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'

    - name: Setup JFrog CLI
      uses: jfrog/setup-jfrog-cli@v3
      env:
        JF_ENV_1: ${{ secrets.JF_SECRET_ENV_1 }}
        
    - name: Ping JFrog CLI
      run: jf rt ping

    - name: Setup Maven Config
      env:
        REPO_NAME : sampleapi-mvn-dev
      run: |
        ##echo "::set-env name=repository::$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//_/g')"
        ##jf mvnc --server-id-resolve=$SERVER_ID --server-id-deploy=$SERVER_ID --repo-resolve-releases=auto-cli-virtual-$repository --repo-resolve-snapshots=auto-cli-virtual-$repository --repo-deploy-releases=auto-cli-virtual-$repository --repo-deploy-snapshots=auto-cli-virtual-$repository
        jf mvnc --repo-resolve-releases $REPO_NAME --repo-resolve-snapshots $REPO_NAME --repo-deploy-releases $REPO_NAME --repo-deploy-snapshots $REPO_NAME
     
    - name: Build & Deploy
      run: | 
        jf mvn clean install
        
    - name: Publish Build Information
      run: |
        # Collect environment variables for the build
        jf rt bce
        # Collect VCS details from git and add them to the build
        jf rt bag
        # Publish build info
        jf rt bp     
   
    - name: Xray scan
      run: |
        jf bs
        
        
